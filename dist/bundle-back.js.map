{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./middleware/index.js","webpack:///./models/campground.js","webpack:///./models/comment.js","webpack:///./models/notification.js","webpack:///./models/user.js","webpack:///./routes/campgrounds.js","webpack:///./routes/comments.js","webpack:///./routes/index.js","webpack:///./src/back/app.js","webpack:///./src/back/cloudinary.js","webpack:///./src/back/geocoder.js","webpack:///./src/back/seedCampgrounds.js","webpack:///./src/back/seedUsers.js","webpack:///external \"async\"","webpack:///external \"body-parser\"","webpack:///external \"cloudinary\"","webpack:///external \"connect-flash\"","webpack:///external \"crypto\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"express-breadcrumbs\"","webpack:///external \"express-session\"","webpack:///external \"faker\"","webpack:///external \"memorystore\"","webpack:///external \"method-override\"","webpack:///external \"mongoose\"","webpack:///external \"multer\"","webpack:///external \"node-geocoder\"","webpack:///external \"nodemailer\"","webpack:///external \"passport\"","webpack:///external \"passport-local-mongoose\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA,mBAAmB,mBAAO,CAAC,oDAAsB;AACjD,gBAAgB,mBAAO,CAAC,8CAAmB;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA,6BAA6B,iDAAiD;AAC9E,iCAAiC,MAAM;AACvC;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA,8BAA8B,sBAAsB;AACpD,iCAAiC,MAAM;AACvC;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;AC5JA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC;AACA;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA,kBAAkB,8BAA8B;AAChD,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;;;;;;;;;;;;AC7BA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc,gCAAgC;AAC9C,CAAC;AACD;AACA;;;;;;;;;;;;ACjBA,iBAAiB,mBAAO,CAAC,0BAAU;;AAEnC;AACA;AACA;AACA,aAAa,gCAAgC;AAC7C,CAAC;;AAED;;;;;;;;;;;;ACRA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,8BAA8B,mBAAO,CAAC,wDAAyB;AAC/D;AACA;AACA;AACA;AACA,YAAY,4CAA4C;AACxD,eAAe,8BAA8B;AAC7C,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED,0CAA0C,yBAAyB;AACnE;AACA;;;;;;;;;;;;AC3BA;AACA,gBAAgB,mBAAO,CAAC,wBAAS;;AAEjC,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,iBAAiB,mBAAO,CAAC,oDAAsB;AAC/C,mBAAmB,mBAAO,CAAC,wDAAwB;AACnD,mBAAmB,mBAAO,CAAC,oDAAsB;AACjD,aAAa,mBAAO,CAAC,wCAAgB;AACrC,qBAAqB,mBAAO,CAAC,wDAAwB;AACrD,mBAAmB,mBAAO,CAAC,4CAAe;;AAE1C;;AAEA;AACA;AACA;AACA,0BAA0B,WAAW,KAAK,kBAAkB;AAC5D,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;;AAE7C,+BAA+B,oBAAoB;;AAEnD;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B,2BAA2B;AAC3B;;AAEA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB;AAC9E,oDAAoD,cAAc;AAClE,SAAS;AACT,KAAK;AACL,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA,iDAAiD,cAAc;AAC/D;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,eAAe;AACnE,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6DAA6D,cAAc;AAC3E,4CAA4C,aAAa;AACzD;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE,gDAAgD,cAAc;AAC9D,wCAAwC,aAAa;AACrD,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oCAAoC,cAAc;AAClD;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;;;;;;;;;;;;AC7NA;AACA,gBAAgB,mBAAO,CAAC,wBAAS;AACjC,mBAAmB,mBAAO,CAAC,oDAAsB;AACjD,gBAAgB,mBAAO,CAAC,8CAAmB;AAC3C,oBAAoB,mBAAO,CAAC,gDAAqB;AACjD,mBAAmB,mBAAO,CAAC,4CAAe;AAC1C,+BAA+B,oBAAoB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6DAA6D,cAAc;AAC3E,2DAA2D,cAAc;AACzE,wCAAwC,aAAa;AACrD;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,iDAAiD;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,0DAA0D,cAAc;AACxE,yDAAyD,cAAc,YAAY,gBAAgB;AACnG,iDAAiD,sDAAsD;AACvG;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iDAAiD,cAAc;AAC/D;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,CAAC;;;AAGD;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,wBAAS;AACjC,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,cAAc,mBAAO,CAAC,oBAAO;AAC7B,mBAAmB,mBAAO,CAAC,8BAAY;AACvC,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,aAAa,mBAAO,CAAC,wCAAgB;AACrC,qBAAqB,mBAAO,CAAC,wDAAwB;AACrD,mBAAmB,mBAAO,CAAC,4CAAe;;AAE1C,+BAA+B,oBAAoB;;AAEnD;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,UAAU,EAAE;AAChB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,eAAe;AACrE,+BAA+B,cAAc;AAC7C,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ,UAAU,EAAE;AAC1C,SAAS;AACT;AACA,2CAA2C,mBAAmB;AAC9D,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+BAA+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gEAAgE,WAAW;AAC3E;AACA,4BAA4B,iBAAiB,SAAS,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE,kEAAkE,WAAW;AAC7E;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA,kBAAkB,8DAA8D,kBAAkB,EAAE;AACpG;AACA;AACA;AACA,SAAS;AACT;AACA,uCAAuC,0BAA0B;AACjE;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA,0BAA0B,8DAA8D,kBAAkB,EAAE;AAC5G,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,4FAA4F,WAAW;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,WAAW;AACvF;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;;;;;;;;;;;ACvUA;AACA,mBAAO,CAAC,sBAAQ;;AAEhB,gBAAgB,mBAAO,CAAC,wBAAS;AACjC,mBAAmB,mBAAO,CAAC,gCAAa;AACxC,uBAAuB,mBAAO,CAAC,wCAAiB;AAChD,oBAAoB,mBAAO,CAAC,gDAAqB;AACjD,iBAAiB,mBAAO,CAAC,0BAAU;AACnC;AACA,iBAAiB,mBAAO,CAAC,0BAAU;AACnC,gBAAgB,mBAAO,CAAC,wCAAiB;AACzC,oBAAoB,mBAAO,CAAC,gCAAa;AACzC,cAAc,mBAAO,CAAC,oCAAe;;;AAGrC,wBAAwB,mBAAO,CAAC,wDAAmB;AACnD,kBAAkB,mBAAO,CAAC,4CAAa;AACvC;;AAEA,aAAa,mBAAO,CAAC,2CAAmB;AACxC;AACA,sBAAsB,mBAAO,CAAC,mDAAuB;AACrD,yBAAyB,mBAAO,CAAC,yDAA0B;AAC3D,oBAAoB,mBAAO,CAAC,6CAAoB;;AAEhD;AACA;AACA;AACA,8BAA8B,oBAAoB,aAAa,wBAAwB;;AAEvF;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,gBAAgB;AAC5G,oEAAoE;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,MAAM;AACvC,SAAS;AACT;AACA,mCAAmC,OAAO;AAC1C;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA,oBAAoB,UAAU,SAAS,kBAAkB;AACzD,CAAC;;AAED;AACA,WAAW,sBAAsB;AACjC;AACA,uBAAuB,6BAA6B;AACpD,sBAAsB,SAAS,GAAG,OAAO;AACzC;AACA;AACA,CAAC;;AAED;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA,CAAC;;AAED;AACA,2BAA2B,UAAU;AACrC,CAAC;;AAED;AACA;AACA,WAAW,QAAQ;AACnB,4BAA4B,QAAQ;AACpC,CAAC;;AAED;AACA;AACA,SAAS,kCAAkC;AAC3C,SAAS,qCAAqC;AAC9C,SAAS,kCAAkC;AAC3C;;AAEA,6BAA6B,QAAQ;AACrC,CAAC;AACD;;;;;;;;;;;;ACtKA,mBAAmB,mBAAO,CAAC,8BAAY;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;ACRA,qBAAqB,mBAAO,CAAC,oCAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACRD;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,oBAAO;AAC7B,mBAAmB,mBAAO,CAAC,8CAAc;AACzC,iBAAiB,mBAAO,CAAC,0CAAY;AACrC,mBAAmB,mBAAO,CAAC,uDAAyB;AACpD,gBAAgB,mBAAO,CAAC,iDAAsB;AAC9C,aAAa,mBAAO,CAAC,2CAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,sCAAsC;AACtC;AACA,iDAAiD,kCAAkC;AACnF,oDAAoD,qCAAqC;AACzF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;;;;;;;;;;;;AClJA,aAAa,mBAAO,CAAC,2CAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,kCAAkC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjDA,kC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,gD;;;;;;;;;;;ACAA,4C;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,4C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,oD","file":"bundle-back.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* eslint-disable consistent-return */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable func-names */\r\n// middleware\r\nconst Campground = require('../models/campground');\r\nconst Comment = require('../models/comment');\r\n\r\nmodule.exports = {\r\n\r\n    checkCommentOwnership: function checkCommentOwnership(req, res, next) {\r\n        // is user logged in?\r\n        // ensureLoggedIn('/login')\r\n        // if (req.isAuthenticated()) {\r\n        Comment.findById(req.params.comment_id, (err, comment) => {\r\n            // the !campground is needed for the case where an ID that appears valid (e.g. has the same number\r\n            // of characters as a valid mongo ID) is passed  (e.g. by someone editing the URL) and null is then returned\r\n            if (err || !comment) {\r\n                console.log(err);\r\n                req.flash('error', 'The comment you wanted could not be found');\r\n                res.redirect('back');\r\n            } else {\r\n                // does the user own the campground?\r\n                // eslint-disable-next-line no-lonely-if\r\n                if (comment.author.id.equals(req.user._id) || req.user.isAdmin) {\r\n                    next();\r\n                } else {\r\n                    req.flash('error', 'You don\\'t have permission to do that');\r\n                    res.redirect('back');\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    // middleware\r\n    checkCampgroundOwnership: function checkCampgroundOwnership(req, res, next) {\r\n        // is user logged in?\r\n        // ensureLoggedIn('/login')\r\n        // if (req.isAuthenticated()) {\r\n        Campground.findById(req.params.id).populate('comments').exec((err, campground) => {\r\n            // the !campground is needed for the case where an ID that appears valid (e.g. has the same number\r\n            // of characters as a valid mongo ID) is passed  (e.g. by someone editing the URL) and null is then returned\r\n            if (err || !campground) {\r\n                console.log(err);\r\n                req.flash('error', 'The campground you wanted could not be found');\r\n                res.redirect('back');\r\n            } else {\r\n                // does the user own the campground?\r\n                // eslint-disable-next-line no-lonely-if\r\n                if (campground.createdBy.id.equals(req.user._id) || req.user.isAdmin) {\r\n                    next();\r\n                } else {\r\n                    req.flash('error', 'You don\\'t have permission to do that');\r\n                    res.redirect('back');\r\n                }\r\n            }\r\n        });\r\n    },\r\n    /**\r\n     * Ensure that a user is logged in before proceeding to next route middleware.\r\n     *\r\n     * This middleware ensures that a user is logged in.  If a request is received\r\n     * that is unauthenticated, the request will be redirected to a login page (by\r\n     * default to `/login`).\r\n     *\r\n     * Additionally, `returnTo` will be be set in the session to the URL of the\r\n     * current request.  After authentication, this value can be used to redirect\r\n     * the user to the page that was originally requested.\r\n     *\r\n     * Options:\r\n     *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\r\n     *   - `setReturnTo`  set redirectTo in session, defaults to _true_\r\n     *\r\n     * Examples:\r\n     *\r\n     *     app.get('/profile',\r\n     *       ensureLoggedIn(),\r\n     *       function(req, res) { ... });\r\n     *\r\n     *     app.get('/profile',\r\n     *       ensureLoggedIn('/signin'),\r\n     *       function(req, res) { ... });\r\n     *\r\n     *     app.get('/profile',\r\n     *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\r\n     *       function(req, res) { ... });\r\n     *\r\n     * @param {Object} options\r\n     * @return {Function}\r\n     * @api public\r\n     */\r\n    ensureLoggedIn: function ensureLoggedIn(options) {\r\n        if (typeof options === 'string') {\r\n            options = { redirectTo: options };\r\n        }\r\n        options = options || {};\r\n\r\n        const url = options.redirectTo || '/login';\r\n        const setReturnTo = (options.setReturnTo === undefined) ? true : options.setReturnTo;\r\n\r\n        return function (req, res, next) {\r\n\r\n            if (!req.isAuthenticated || !req.isAuthenticated()) {\r\n                if (setReturnTo && req.session) {\r\n                    req.session.returnTo = req.originalUrl || req.url;\r\n                    console.log(`originalUrl: ${req.session.returnTo}`);\r\n                }\r\n                req.flash('error', 'You need to be logged in to do that');\r\n                return res.redirect(url);\r\n            }\r\n\r\n            next();\r\n        };\r\n    },\r\n    /**\r\n     * Ensure that no user is logged in before proceeding to next route middleware.\r\n     *\r\n     * This middleware ensures that no user is logged in.  If a request is received\r\n     * that is authenticated, the request will be redirected to another page (by\r\n     * default to `/`).\r\n     *\r\n     * Options:\r\n     *   - `redirectTo`   URL to redirect to in logged in, defaults to _/_\r\n     *\r\n     * Examples:\r\n     *\r\n     *     app.get('/login',\r\n     *       ensureLoggedOut(),\r\n     *       function(req, res) { ... });\r\n     *\r\n     *     app.get('/login',\r\n     *       ensureLoggedOut('/home'),\r\n     *       function(req, res) { ... });\r\n     *\r\n     *     app.get('/login',\r\n     *       ensureLoggedOut({ redirectTo: '/home' }),\r\n     *       function(req, res) { ... });\r\n     *\r\n     * @param {Object} options\r\n     * @return {Function}\r\n     * @api public\r\n     */\r\n    ensureLoggedOut: function ensureLoggedOut(options) {\r\n        if (typeof options === 'string') {\r\n            options = { redirectTo: options };\r\n        }\r\n        options = options || {};\r\n\r\n        const url = options.redirectTo || '/';\r\n\r\n        return function (req, res, next) {\r\n            if (req.isAuthenticated && req.isAuthenticated()) {\r\n                return res.redirect(url);\r\n            }\r\n            next();\r\n        };\r\n    },\r\n};\r\n","const mongoose = require('mongoose');\r\n// pattern that states what properties a campground has\r\nconst campgroundSchema = new mongoose.Schema({\r\n    name: { type: String, require: true, unique: true },\r\n    currency: String,\r\n    price: Number,\r\n    images: [\r\n        { type: String },\r\n    ],\r\n    description: { type: String, require: true },\r\n    location: { type: String, require: true },\r\n    lat: Number,\r\n    lng: Number,\r\n    comments: [\r\n        {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'Comment',\r\n        },\r\n    ],\r\n    createdBy: {\r\n        id: {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'User',\r\n        },\r\n        firstName: String,\r\n        lastName: String,\r\n    },\r\n});\r\n// compiles the schema into a model (object) that now includes all the methods we need\r\nmodule.exports = mongoose.model('Campground', campgroundSchema);\r\n","const mongoose = require('mongoose');\r\n// pattern that states what properties a comment has\r\nconst commentSchema = new mongoose.Schema({\r\n    text: String,\r\n    author: {\r\n        id: {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'User',\r\n        },\r\n        firstName: String,\r\n        lastName: String,\r\n    },\r\n    // default schema option as a function reference. Mongoose will execute it and\r\n    // use the return value as the default.\r\n    created: { type: Date, default: Date.now },\r\n});\r\n// compiles the schema into a model (object) that now includes all the methods we need\r\nmodule.exports = mongoose.model('Comment', commentSchema);\r\n","const mongoose = require('mongoose');\r\n\r\nconst notificationSchema = new mongoose.Schema({\r\n    username: String,\r\n    campgroundId: String,\r\n    isRead: { type: Boolean, default: false },\r\n});\r\n\r\nmodule.exports = mongoose.model('Notification', notificationSchema);\r\n","const mongoose = require('mongoose');\r\nconst passportLocalMongoose = require('passport-local-mongoose');\r\n// pattern that states what properties a user has\r\nconst userSchema = new mongoose.Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    email: { type: String, require: true, unique: true },\r\n    password: { type: String, require: true },\r\n    isAdmin: { type: Boolean, default: false },\r\n    resetPasswordToken: String,\r\n    resetPasswordExpires: Date,\r\n    notifications: [\r\n        {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'Notification',\r\n        },\r\n    ],\r\n    followers: [\r\n        {\r\n            type: mongoose.Schema.Types.ObjectId,\r\n            ref: 'User',\r\n        },\r\n    ],\r\n});\r\n\r\nuserSchema.plugin(passportLocalMongoose, { usernameField: 'email' });\r\n// compiles the schema into a model (object) that now includes all the methods we need\r\nmodule.exports = mongoose.model('User', userSchema);\r\n","/* eslint-disable no-shadow */\r\nconst express = require('express');\r\n\r\nconst multer = require('multer');\r\nconst geocoder = require('../src/back/geocoder');\r\nconst cloudinary = require('../src/back/cloudinary');\r\nconst Campground = require('../models/campground');\r\nconst User = require('../models/user');\r\nconst Notification = require('../models/notification');\r\nconst middleware = require('../middleware');\r\n\r\n// multer configuration\r\n\r\n// configures multer to use a custom filename for each upload\r\nconst storage = multer.diskStorage({\r\n    filename: function filename(req, file, callback) {\r\n        callback(null, `${Date.now()} - ${file.originalname}`);\r\n    },\r\n});\r\n// configures multer to only allow image files, returning an error if a non-image file is uploaded\r\n// eslint-disable-next-line consistent-return\r\nconst fileFilter = (req, file, cb) => {\r\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/i)) {\r\n        return cb(new Error('Only image files are allowed!'), false);\r\n    }\r\n    cb(null, true);\r\n};\r\nconst upload = multer({ storage, fileFilter });\r\n\r\nconst router = express.Router({ mergeParams: true });\r\n\r\nfunction escapeRegex(text) {\r\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\nrouter.get('/', (req, res) => {\r\n    if (req.query.search) {\r\n        // RegExp flags:\r\n        // g - global match; find all matches rather than stopping after the first match\r\n        // i - ignore case; if u flag is also enabled, use Unicode case folding\r\n        const regex = new RegExp(escapeRegex(req.query.search), 'gi');\r\n\r\n        Campground.find({ name: regex }, (err, campgrounds) => {\r\n            if (err) {\r\n                console.log('err :', err);\r\n                req.flash('error', 'An error was encountered whilst attempting the search');\r\n                return res.redirect('/campgrounds');\r\n            }\r\n            req.breadcrumbs('All Campgrounds', '/campgrounds');\r\n            if (campgrounds.length < 1) {\r\n                req.flash('error', 'There are no campgrounds we know that match that search');\r\n                return res.redirect('/campgrounds');\r\n            }\r\n            req.breadcrumbs('Search Results', `/campgrounds${req.query.search}`);\r\n            return res.render('campgrounds/index', { campgrounds });\r\n        });\r\n    } else {\r\n        Campground.find({}, (err, campgrounds) => {\r\n            if (err) {\r\n                console.log('err :', err);\r\n            } else {\r\n                req.breadcrumbs('All Campgrounds', '/');\r\n                res.render('campgrounds/index', { campgrounds });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n// NEW - displays form to create a new campground\r\nrouter.get('/new', middleware.ensureLoggedIn('/login'), (req, res) => {\r\n    req.breadcrumbs('All Campgrounds', '/campgrounds');\r\n    req.breadcrumbs('New Campground', '/new');\r\n    res.render('campgrounds/new');\r\n});\r\n// CREATE - add a new campground to DB\r\nrouter.post('/', middleware.ensureLoggedIn('/login'), upload.single('imageUpload'), (req, res) => {\r\n    // req.body.newCampground.description = req.sanitize(req.body.newCampground.description);\r\n\r\n    geocoder.geocode(req.body.campground.location, async (err, geolocationData) => {\r\n        if (err || !geolocationData.length) {\r\n            req.flash('error', 'Invalid Address');\r\n            res.redirect('back');\r\n        } else {\r\n            const campCreatedBy = {\r\n                id: req.user._id,\r\n                firstName: req.user.firstName,\r\n                lastName: req.user.lastName,\r\n            };\r\n\r\n            const newCampground = {\r\n                name: req.body.campground.name,\r\n                description: req.body.campground.description,\r\n                price: req.body.campground.price,\r\n                location: geolocationData[0].formattedAddress,\r\n                lat: geolocationData[0].latitude,\r\n                lng: geolocationData[0].longitude,\r\n                createdBy: campCreatedBy,\r\n                images: [],\r\n            };\r\n\r\n            const images = [];\r\n            if (req.body.campground.imageUrl) images.push(req.body.campground.imageUrl);\r\n            if (req.file.path) images.push(req.file.path);\r\n            // The function passed to new Promise is called the executor.\r\n            // The resulting promise object has internal properties:\r\n            // state — initially “pending”, then changes to either “fulfilled” or “rejected”,\r\n            // result — an arbitrary value of your choosing, initially undefined.\r\n            const resPromises = images.map(image => new Promise((resolve, reject) => {\r\n                cloudinary.v2.uploader.upload(image, (err, result) => {\r\n                    if (err) reject(err);\r\n                    // sets state to \"fulfilled\",\r\n                    // sets result to result.secure_url\r\n                    else resolve(result.secure_url);\r\n                });\r\n            }));\r\n            // It takes an iterable object with promises, technically it can be any iterable, but usually it’s an array,\r\n            // and returns a new promise. The new promise resolves with when all of them are settled and has an array of their results.\r\n            Promise.all(resPromises)\r\n                .then(async (secureUrls) => {\r\n                    secureUrls.forEach(url => newCampground.images.push(url));\r\n                    try {\r\n                        const campground = await Campground.create(newCampground);\r\n                        const user = await User.findById(req.user._id).populate('followers').exec();\r\n                        const newNotification = {\r\n                            username: req.user.username,\r\n                            campgroundId: campground.id,\r\n                        };\r\n                        // if there are a very large number of followers this is going to slow down the entire site\r\n                        // TODO: need to delegate this to a background task\r\n                        // eslint-disable-next-line no-restricted-syntax\r\n                        for (const follower of user.followers) {\r\n                            // eslint-disable-next-line no-await-in-loop\r\n                            const notification = await Notification.create(newNotification);\r\n                            follower.notifications.push(notification);\r\n                            follower.save();\r\n                        }\r\n\r\n                        req.flash('success', 'Campground created successfully!');\r\n                        res.redirect(`campgrounds/${campground._id}`);\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                        req.flash('error', err.message);\r\n                        res.redirect('back');\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n\r\n            console.log(newCampground);\r\n        }\r\n    });\r\n});\r\n\r\n// SHOW - shows info about one campground\r\nrouter.get('/:id', (req, res) => {\r\n    // console.log(req.params.id);\r\n    // res.redirect('/');\r\n    Campground.findById(req.params.id).populate('comments').exec((err, campground) => {\r\n        if (err || !campground) {\r\n            console.log(err);\r\n            req.flash('error', 'The campground you wanted could not be found');\r\n            res.redirect('back');\r\n        } else {\r\n            req.breadcrumbs('All Campgrounds', '/campgrounds');\r\n            req.breadcrumbs(campground.name, `/campgrounds/${campground.id}`);\r\n            res.render('campgrounds/show', { campground });\r\n        }\r\n    });\r\n});\r\n\r\n// EDIT - form to edit a campground's information\r\nrouter.get('/:id/edit', middleware.ensureLoggedIn('/login'), middleware.checkCampgroundOwnership, (req, res) => {\r\n    Campground.findById(req.params.id).populate('comments').exec((err, campground) => {\r\n        req.breadcrumbs('All Campgrounds', '/campgrounds');\r\n        req.breadcrumbs(campground.name, `/campgrounds/${campground.id}`);\r\n        req.breadcrumbs('Edit', `/campgrounds/${campground.id}/edit`);\r\n        res.render('campgrounds/edit', { campground });\r\n    });\r\n});\r\n// UPDATE - save the edited campground\r\nrouter.put('/:id', middleware.ensureLoggedIn('/login'), middleware.checkCampgroundOwnership, (req, res) => {\r\n    geocoder.geocode(req.body.location, (err, geolocationData) => {\r\n        if (err || !geolocationData.length) {\r\n            req.flash('error', 'Invalid Address');\r\n            res.redirect('back');\r\n        } else {\r\n            // TODO: Change this so that we geocode only if the location has changed.\r\n            // const newData = {};\r\n            // Object.assign(newData, req.body.campground);\r\n            req.body.campground.location = geolocationData[0].formattedAddress;\r\n            // newData.location = geolocationData[0].formattedAddress;\r\n            req.body.campground.lat = geolocationData[0].latitude;\r\n            req.body.campground.lng = geolocationData[0].longitude;\r\n            // req.body.campground.description = req.sanitize(req.body.campground.description);\r\n            Campground.findByIdAndUpdate(req.params.id, req.body.campground, (err, campground) => {\r\n                if (err || !campground) {\r\n                    console.log(err);\r\n                    req.flash('error', 'The campground you wanted to update could not be found');\r\n                    res.redirect('/');\r\n                } else {\r\n                    req.flash('success', 'Campground edited successfully!');\r\n                    res.redirect(`${req.params.id}`);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// DELETE/DESTROY\r\nrouter.delete('/:id', middleware.ensureLoggedIn('/login'), middleware.checkCampgroundOwnership, (req, res) => {\r\n    Campground.findByIdAndDelete(req.params.id, (err) => {\r\n        if (err) {\r\n            console.log('err :', err);\r\n            req.flash('error', 'The campground you wanted could not be found');\r\n            res.redirect('back');\r\n        } else {\r\n            req.flash('success', 'Campground deleted successfully!');\r\n            res.redirect('/campgrounds');\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable no-param-reassign */\r\nconst express = require('express');\r\nconst Campground = require('../models/campground');\r\nconst Comment = require('../models/comment');\r\nconst breadcrumbs = require('express-breadcrumbs');\r\nconst middleware = require('../middleware');\r\nconst router = express.Router({ mergeParams: true });\r\n\r\n// eslint-disable-next-line consistent-return\r\n// function isLoggedIn(req, res, next) {\r\n//     if (req.isAuthenticated()) {\r\n//         return next();\r\n//     }\r\n//     res.redirect('/login');\r\n// }\r\n// NEW - displays form to create a new comment\r\nrouter.get('/new', middleware.ensureLoggedIn('/login'), (req, res) => {\r\n    Campground.findById(req.params.id, (err, campground) => {\r\n        if (err || campground) {\r\n            console.log(err);\r\n            req.flash('error', 'The campground you wanted to add a comment to could not be found');\r\n            res.redirect('back');\r\n        } else {\r\n            req.breadcrumbs('All Campgrounds', '/campgrounds');\r\n            req.breadcrumbs(campground.name, `/campgrounds/${campground.id}`);\r\n            req.breadcrumbs('Add Comment', `/campgrounds/${campground.id}/comments/new`);\r\n            res.render('comments/new', { campground });\r\n        }\r\n    });\r\n});\r\n// CREATE - add a new comment to a campground and save to DB\r\nrouter.post('/', middleware.ensureLoggedIn('/login'), (req, res) => {\r\n    Campground.findById(req.params.id, (err, campground) => {\r\n        if (err) {\r\n            res.redirect('/campgrounds'); // TODO: handle this better\r\n            console.log(err);\r\n        } else {\r\n            // eslint-disable-next-line no-shadow\r\n            Comment.create(req.body.newComment, (err, comment) => {\r\n                if (err) {\r\n                    res.redirect('/campgrounds'); // TODO: handle this better\r\n                    console.log(err);\r\n                } else {\r\n                    comment.author.id = req.user._id;\r\n                    // just so the name can be easily accessed, instead of having to search for the User db entry every time to get it\r\n                    console.log(req.user.firstName);\r\n                    console.log(req.user.lastName);\r\n                    comment.author.firstName = req.user.firstName;\r\n                    comment.author.lastName = req.user.lastName;\r\n                    comment.save();\r\n                    campground.comments.push(comment);\r\n                    campground.save();\r\n                    req.flash('success', 'Comment added successfully!');\r\n                    res.redirect(`/campgrounds/${campground.id}`);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// EDIT - form to edit a comment\r\nrouter.get('/:comment_id/edit', middleware.ensureLoggedIn('/login'), middleware.checkCommentOwnership, (req, res) => {\r\n    Comment.findById(req.params.comment_id, (err, foundComment) => {\r\n        if (err || !foundComment) {\r\n            req.flash('error', 'The comment you wanted could not be found')\r\n            res.redirect('back');\r\n        } else {\r\n            Campground.findById(req.params.id, (err, campground) => {\r\n                if (err || !campground) {\r\n                    req.flash('error', 'The campground you wanted could not be found');\r\n                    res.redirect('back');\r\n                } else {\r\n                    req.breadcrumbs('All Campgrounds', '/');\r\n                    req.breadcrumbs(campground.name, `//${campground.id}`);\r\n                    req.breadcrumbs('Edit Comment', `//${campground.id}/comments/${foundComment.id}/edit`);\r\n                    res.render('comments/edit', { campground_id: req.params.id, comment: foundComment });\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n// UPDATE - save the edited campground\r\nrouter.put('/:comment_id', middleware.ensureLoggedIn('/login'), middleware.checkCommentOwnership, (req, res) => {\r\n    // req.body.campground.description = req.sanitize(req.body.campground.description);\r\n    Campground.findById(req.params.id, (err, campground) => {\r\n        if (err || !campground) {\r\n            req.flash('error', 'The campground you tried to update a comment on could not be found');\r\n            res.redirect('back');\r\n        } else {\r\n            Comment.findByIdAndUpdate(req.params.comment_id, req.body.updatedComment, (err) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                    res.redirect('/');\r\n                } else {\r\n                    req.flash('success', 'Comment updated successfully!');\r\n                    res.redirect(`/campgrounds/${req.params.id}`);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// DELETE/DESTROY\r\nrouter.delete('/:id', middleware.ensureLoggedIn('/login'), middleware.checkCommentOwnership, (req, res) => {\r\n    Campground.findById(req.params.id, (err, campground) => {\r\n        if (err || !campground) {\r\n            req.flash('error', 'The campground you tried to delete a comment on could not be found');\r\n            res.redirect('back');\r\n        } else {\r\n            Campground.findByIdAndDelete(req.params.id, (err) => {\r\n                if (err) {\r\n                    console.log('err :', err);\r\n                    req.flash('error', 'The comment you wanted to delete could not be found');\r\n                    res.redirect('back');\r\n                } else {\r\n                    req.flash('success', 'Comment deleted successfully!');\r\n                    res.redirect('back');\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n\r\nmodule.exports = router;\r\n","/* eslint-disable no-lonely-if */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable consistent-return */\r\nconst express = require('express');\r\nconst passport = require('passport');\r\nconst async = require('async');\r\nconst nodemailer = require('nodemailer');\r\nconst crypto = require('crypto');\r\nconst User = require('../models/user');\r\nconst Notification = require('../models/notification');\r\nconst middleware = require('../middleware');\r\n\r\nconst router = express.Router({ mergeParams: true });\r\n\r\nrouter.get('/', (req, res) => {\r\n    res.render('landing');\r\n});\r\n\r\n// router.get('/secret', middleware.ensureLoggedIn('/login'), (req, res) => {\r\n//     req.breadcrumbs('Secret Page!', '/secret');\r\n//     res.render('secret');\r\n// });\r\n\r\n// render login form\r\nrouter.get('/login', (req, res) => {\r\n    req.breadcrumbs('Login', '/login');\r\n    res.render('users/login');\r\n});\r\n// passport.authenticate passed as middleware\r\n// router.post('/login', passport.authenticate('local', {\r\n//     successRedirect: '/campgrounds',\r\n//     failureRedirect: '/login',\r\n// }), () => { });\r\nrouter.post('/login', passport.authenticate('local', {\r\n    successReturnToOrRedirect: '/campgrounds',\r\n    failureRedirect: '/login',\r\n}));\r\n\r\nrouter.get('/logout', (req, res) => {\r\n    // Perform Action to Logout\r\n    req.logout();\r\n\r\n    res.redirect('/');\r\n});\r\n\r\n// user profile\r\nrouter.get('/users/:id', async (req, res) => {\r\n    try {\r\n        const user = await User.findById(req.params.id).populate('followers').exec();\r\n        res.render('users/profile', { user });\r\n    } catch (err) {\r\n        req.flash('error', err.message);\r\n        return res.redirect('back');\r\n    }\r\n});\r\n\r\n// follow user\r\nrouter.get('/follow/:id', middleware.ensureLoggedIn('/login'), async (req, res) => {\r\n    try {\r\n        const user = await User.findById(req.params.id);\r\n        user.followers.push(req.user._id);\r\n        user.save();\r\n        req.flash('success', `Successfully followed ${user.firstName}!`);\r\n        res.redirect(`/users/${req.params.id}`);\r\n    } catch (err) {\r\n        req.flash('error', err.message);\r\n        res.redirect('back');\r\n    }\r\n});\r\n\r\n// view all notifications\r\nrouter.get('/notifications', middleware.ensureLoggedIn('/login'), async (req, res) => {\r\n    try {\r\n        const user = await User.findById(req.user._id).populate({\r\n            path: 'notifications',\r\n            options: { sort: { _id: -1 } },\r\n        }).exec();\r\n        const allNotifications = user.notifications;\r\n        res.render('notifications/index', { allNotifications });\r\n    } catch (err) {\r\n        req.flash('error', err.message);\r\n        res.redirect('back');\r\n    }\r\n});\r\n\r\n// handle notification\r\nrouter.get('/notifications/:id', middleware.ensureLoggedIn('/login'), async (req, res) => {\r\n    try {\r\n        const notification = await Notification.findById(req.params.id);\r\n        notification.isRead = true;\r\n        notification.save();\r\n        res.redirect(`/campgrounds/${notification.campgroundId}`);\r\n    } catch (err) {\r\n        req.flash('error', err.message);\r\n        res.redirect('back');\r\n    }\r\n});\r\n\r\n// FORGOTTEN PASSWORD - form\r\nrouter.get('/forgot', (req, res) => {\r\n    req.breadcrumbs('Forgotten Password', '/forgot');\r\n    res.render('users/forgot');\r\n});\r\n\r\n// FORGOTTEN PASSWORD - generate reset token and send email to user, inviting them to reset their password\r\nrouter.post('/forgot', (req, res, next) => {\r\n    // array of functions that are called one after another\r\n    async.waterfall([\r\n        (done) => {\r\n            // generate a random hexadecimal string\r\n            crypto.randomBytes(20, (err, buf) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                    req.flash('error', 'There was an error encountered while generating the reset token. The administrator has been notified.');\r\n                    return res.redirect('/forgot');\r\n                }\r\n                const token = buf.toString('hex');\r\n                // We are calling the done function with two arguments: the first argument is any error that we want to pass\r\n                // to the next step, and the second argument is the actual result or value that we want to pass to the next step\r\n                done(null, token);\r\n            });\r\n        },\r\n        // Every step function takes two arguments, the first of which is the result from the previous step\r\n        (token, done) => {\r\n            User.findOne({ email: req.body.email }, (err, foundUser) => {\r\n                // if no user with the email given can be found, redirect to forgotten password page and inform user of error\r\n                if (!foundUser) {\r\n                    req.flash('error', 'no account with that email address exists');\r\n                    return res.redirect('/forgot');\r\n                }\r\n                // otherwise, save the token and expiry point to the user document in db.\r\n                foundUser.resetPasswordToken = token;\r\n                foundUser.resetPasswordExpires = Date.now() + 3600000;\r\n                console.log(`resetPasswordExpires${foundUser.resetPasswordExpires}`);\r\n                foundUser.save((err, updatedUser) => {\r\n                    if (err) {\r\n                        console.log(err);\r\n                        req.flash('error', 'There was an error encountered while saving the token to your user entry. The administrator has been notified.');\r\n                        return res.redirect('/forgot');\r\n                    }\r\n                    done(null, token, updatedUser);\r\n                });\r\n            });\r\n        },\r\n        (token, user) => {\r\n            const smtpTransport = nodemailer.createTransport({\r\n                service: 'Gmail',\r\n                auth: {\r\n                    user: 'tmclayson@gmail.com',\r\n                    pass: process.env.GMAILPW,\r\n                },\r\n            });\r\n            // eslint-disable-next-line prefer-template\r\n            const message = 'You are receiving this because you (or someone else) have requested to reset the\\n'\r\n                + `password associated with the email address ${user.email}. \\n\\n`\r\n                + 'Please click on the following link, or paste this link into your browser to complete the process.\\n\\n'\r\n                + `http://${req.headers.host}/reset/${token} \\n\\n`\r\n                + 'If you did not request this, please ignore this email and your password will remain unchanged.';\r\n            const mailOptions = {\r\n                to: user.email,\r\n                from: 'tmclayson@gmail.com',\r\n                subject: 'Password Reset',\r\n                text: message,\r\n            };\r\n            smtpTransport.sendMail(mailOptions, () => {\r\n                console.log(`Recovery email sent to ${user.email}`);\r\n                req.flash('success', `An email has been sent to ${user.email} with further instructions.`);\r\n                return res.redirect('/forgot/email-sent');\r\n            });\r\n        },\r\n    ], (err) => {\r\n        if (err) {\r\n            next(err);\r\n        } else {\r\n            res.redirect('/forgot');\r\n        }\r\n    });\r\n});\r\n\r\n// RESET password - form\r\nrouter.get('/reset/:token', (req, res) => {\r\n    User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } }, (err, user) => {\r\n        if (!user) {\r\n            req.flash('error', 'Password reset token is invalid or has expired.');\r\n            res.redirect('/forgot');\r\n        } else {\r\n            req.breadcrumbs('Reset Password', '/reset');\r\n            res.render('users/reset', { token: req.params.token });\r\n        }\r\n    });\r\n});\r\n\r\n// RESET password - save updated password\r\nrouter.post('/reset/:token', (req, res) => {\r\n    async.waterfall([\r\n        function postResetStep1(done) {\r\n            User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } }, (err, foundUser) => {\r\n                console.log(`foundUser${foundUser}`);\r\n                if (!foundUser) {\r\n                    req.flash('error', 'Password reset token is invalid or has expired.');\r\n                    return res.redirect('back');\r\n                }\r\n\r\n                if (req.body.newPassword === req.body.confirmPassword) {\r\n                    foundUser.setPassword(req.body.newPassword, (err) => {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            req.flash('error', 'An error was encountered while attempting to set the new password.');\r\n                            return res.redirect('back');\r\n                        }\r\n                        foundUser.resetPasswordToken = undefined;\r\n                        foundUser.resetPasswordExpires = undefined;\r\n                        // console.log(`foundUser${foundUser}`);\r\n                        foundUser.save((err, foundUser) => {\r\n                            if (err) {\r\n                                console.log(err);\r\n                                req.flash('error', 'An error was encountered while attempting to save the user document after setting the new password.');\r\n                                return res.redirect('back');\r\n                            }\r\n                            console.log(`updatedUser${foundUser}`);\r\n                            req.login(foundUser, (err) => {\r\n                                if (err) {\r\n                                    console.log(err);\r\n                                }\r\n                                done(null, foundUser);\r\n                            });\r\n                        });\r\n                    });\r\n                } else {\r\n                    req.flash('error', 'The passwords entered didn\\'t match');\r\n                    return res.redirect('back');\r\n                }\r\n            });\r\n        },\r\n        function postResetStep2(user) {\r\n            const smtpTransport = nodemailer.createTransport({\r\n                service: 'Gmail',\r\n                auth: {\r\n                    user: 'tmclayson@gmail.com',\r\n                    pass: process.env.GMAILPW,\r\n                },\r\n            });\r\n            const mailOptions = {\r\n                to: user.email,\r\n                from: 'tmclayson@gmail.com',\r\n                subject: 'Your password has been changed',\r\n                text: `Hi,\r\n\r\n               This email is to confirm that the password for the account associated with ${user.email} has been changed.`,\r\n            };\r\n            smtpTransport.sendMail(mailOptions, (err) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                    req.flash('error', 'An error was encountered while attempting to send the password change confirmation email');\r\n                }\r\n                console.log(`The password for the account associated with ${user.email} has been changed`);\r\n                req.flash('success', 'Success! Your password has been changed.');\r\n                return res.redirect('/campgrounds');\r\n            });\r\n        },\r\n    ], (err) => {\r\n        if (err) {\r\n            console.log(err);\r\n            req.flash('error', 'An error was encountered whilst attempting to change your password. The administrator has been informed.');\r\n            return res.redirect('/campgrounds');\r\n        }\r\n    });\r\n});\r\n\r\n// render login form\r\nrouter.get('/forgot/email-sent', (req, res) => {\r\n    req.breadcrumbs('Password Reset Email Sent', '/forgot/email-sent');\r\n    res.render('users/forgot_email_sent');\r\n});\r\n\r\n// NEW user form\r\nrouter.get('/register', (req, res) => {\r\n    req.breadcrumbs('Register', '/register');\r\n    res.render('users/register');\r\n});\r\n\r\n// CREATE new user and redirect\r\nrouter.post('/register', (req, res, next) => {\r\n    // make a new User object, that isn't saved to the database, yet.\r\n    // we don't save the password to the database\r\n    // User.register hashes the password and returns a new user object containing the username and hashed password\r\n    // eslint-disable-next-line consistent-return\r\n    User.register(new User({\r\n        email: req.body.email,\r\n        firstName: req.body.firstName,\r\n        lastName: req.body.lastName,\r\n    }), req.body.password, (err, user) => {\r\n        if (err) {\r\n            console.log(err);\r\n            req.breadcrumbs('Register', '/register');\r\n            req.flash('error', err.message);\r\n            // you can either set a flash message on the req.flash object before returning a res.redirect()\r\n            // OR you can pass the req.flash object into the res.render() function.\r\n            return res.redirect('/register');\r\n        }\r\n        console.log(user);\r\n        // passport.authenticate actually logs the user in, using the local strategy\r\n        // eslint-disable-next-line no-shadow\r\n        req.login(user, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n                return next(err);\r\n            }\r\n            req.flash('success', 'Thanks for signing up!');\r\n            return res.redirect('/campgrounds');\r\n        });\r\n    });\r\n});\r\n// if (err) {\r\n//     console.log(err);\r\n//     req.breadcrumbs('Register', '/register');\r\n//     console.log('ERROR!!!!!!!!!!!!!!!!');\r\n//     return res.render('register');\r\n// }\r\n// console.log('OK!!!!!!!!!!!!!!!!');\r\n// // passport.authenticate actually logs the user in, using the local strategy\r\n// passport.authenticate('local')(req, res, () => {\r\n//     console.log('HERE!!!!!!!!!!!!!!!!');\r\n//     res.redirect('/campgrounds');\r\n// });\r\n\r\nmodule.exports = router;\r\n","// SETUP ======================================================================\r\nrequire('dotenv').config();\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst methodOverride = require('method-override');\r\nconst breadcrumbs = require('express-breadcrumbs');\r\nconst passport = require('passport');\r\n// const localStrategy = require('passport-local').Strategy;\r\nconst mongoose = require('mongoose');\r\nconst session = require('express-session');\r\nconst MemoryStore = require('memorystore')(session);\r\nconst flash = require('connect-flash');\r\n\r\n\r\nconst seedCampgrounds = require('./seedCampgrounds');\r\nconst seedUsers = require('./seedUsers');\r\n// const lib = require('./assets/lib/js/mylibrary');\r\n\r\nconst User = require('../../models/user');\r\n// requiring routes\r\nconst commentRoutes = require('../../routes/comments');\r\nconst campgroundRoutes = require('../../routes/campgrounds');\r\nconst indexRoutes = require('../../routes/index');\r\n\r\nconst args = process.argv.slice(2);\r\nconst seedCampgroundsArg = Boolean(args[0]);\r\n// CONFIGURATION ===============================================================\r\nmongoose.connect(`mongodb://${process.env.DB_HOST}/yelpcamp`, { useNewUrlParser: true });\r\n\r\nconst app = express();\r\n\r\n// EXPRESS SETUP\r\napp.set('view engine', 'ejs');\r\napp.use(flash());\r\n// app.use(morgan('dev')); // log every request to the console\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(methodOverride('_method'));\r\napp.use(breadcrumbs.init());\r\napp.use(breadcrumbs.setHome({\r\n    name: 'Landing',\r\n}));\r\napp.use(express.static('public'));\r\n\r\n// PASSPORT CONFIGURATION\r\napp.use(session({\r\n    store: new MemoryStore({\r\n        checkPeriod: 86400000, // prune expired entries every 24h\r\n    }),\r\n    secret: 'Cheese Rolling',\r\n    resave: false,\r\n    saveUninitialized: false,\r\n}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\npassport.use(User.createStrategy());\r\npassport.serializeUser(User.serializeUser());\r\npassport.deserializeUser(User.deserializeUser());\r\n\r\n// this must come after the passport setup\r\napp.use(async (req, res, next) => {\r\n    res.locals.currentUser = req.user;\r\n    if (req.user) {\r\n        try {\r\n            // populate the user's notifications, but only thoe they haven't read yet\r\n            const user = await User.findById(req.user._id).populate('notifications', null, { isRead: false }).exec();\r\n            res.locals.notifications = user.notifications.reverse(); // .reverse() outputs in descending order\r\n        } catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n    res.locals.errorMessage = req.flash('error');\r\n    res.locals.successMessage = req.flash('success');\r\n    res.locals.breadcrumbs = req.breadcrumbs();\r\n    next();\r\n});\r\n\r\n// ROUTES ===============================================================\r\napp.use('/', indexRoutes);\r\napp.use('/campgrounds/:id/comments', commentRoutes);\r\napp.use('/campgrounds', campgroundRoutes);\r\n\r\nif (seedUsers()) {\r\n    seedCampgrounds(seedCampgroundsArg)\r\n        .then(() => {\r\n            // LAUNCH ===============================================================\r\n            app.listen(process.env.PORT, 'localhost', () => {\r\n                console.log('Server has started!');\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n/*\r\napp.get('/search', (req, res) => {\r\n    res.render('search');\r\n});\r\n\r\napp.post('/results', (req, res) => {\r\n    const searchQuery = {};\r\n    searchQuery.s = req.body.title;\r\n    searchQuery.y = req.body.year;\r\n    searchQuery.plot = req.body.plot;\r\n\r\n    const endpoint = 'http://www.omdbapi.com/?apikey=a281818e&';\r\n    const queryString = lib.buildQuery(searchQuery);\r\n    // console.log(endpoint + queryString);\r\n\r\n    request(endpoint + queryString, (error, response, body) => {\r\n        if (error) {\r\n            console.log(`error ${error}`);\r\n        } else if (response.statusCode === 200) {\r\n            const data = JSON.parse(body);\r\n            res.render('results', { data });\r\n        }\r\n    });\r\n    // res.redirect('/friends');\r\n});\r\n\r\napp.get('/speak/:animal(pig|cow|dog)', (req, res) => {\r\n    const sounds = {\r\n        pig: 'Oink',\r\n        cow: 'Moo',\r\n        dog: 'Woof Woof',\r\n    };\r\n    const animalReq = req.params.animal.toLowerCase(); // lowerCase so that only one entry is needed in the sounds object\r\n    console.log(req.params);\r\n    res.send(`The ${animalReq} says \"${sounds[animalReq]}\"!`);\r\n});\r\n\r\napp.get('/repeat/:phrase(hello|blah)/:repetitions', (req, res) => {\r\n    const { phrase, repetitions } = req.params;\r\n    let response = phrase;\r\n    for (let index = 1; index < Number(repetitions); index += 1) {\r\n        response = `${response} ${phrase}`;\r\n    }\r\n    res.send(response);\r\n});\r\n\r\napp.post('/addfriend', (req, res) => {\r\n    const { newfriend } = req.body;\r\n    friends.push(newfriend);\r\n    res.redirect('/friends');\r\n    // res.send('<h1>Welcome to the home page!</h1>');\r\n});\r\n\r\napp.get('/friends', (req, res) => {\r\n    res.render('friends', { friends });\r\n});\r\n\r\napp.get('/fallinlovewith/:thing', (req, res) => {\r\n    // req.params is an object, not an array, so const [,thing] does not work.\r\n    const { thing } = req.params;\r\n    res.render('love.ejs', { thing });\r\n});\r\n\r\napp.get('/posts', (req, res) => {\r\n    const posts = [\r\n        { title: 'Post 1', author: 'Susy' },\r\n        { title: 'Post 2', author: 'Charlie' },\r\n        { title: 'Post 3', author: 'Colt' },\r\n    ];\r\n\r\n    res.render('posts.ejs', { posts });\r\n});\r\n*/\r\n","const cloudinary = require('cloudinary');\r\n// cloudinary setup\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_NAME,\r\n    api_key: process.env.CLOUDINARY_API_KEY,\r\n    api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nmodule.exports = cloudinary;\r\n","const NodeGeocoder = require('node-geocoder');\r\n// geocoder setup\r\nmodule.exports = NodeGeocoder({\r\n    provider: 'google',\r\n    // Optional depending on the providers\r\n    httpAdapter: 'https', // Default\r\n    apiKey: process.env.GEOCODER_API_KEY,\r\n    formatter: null,\r\n});\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable max-len */\r\nconst faker = require('faker');\r\nconst cloudinary = require('./cloudinary');\r\nconst geocoder = require('./geocoder');\r\nconst Campground = require('../../models/campground');\r\nconst Comment = require('../../models/comment');\r\nconst User = require('../../models/user');\r\n\r\nconst seeds = [\r\n    {\r\n        name: 'Guadarama',\r\n        images: [\r\n            './seed_images/adrian-393713-unsplash.jpg',\r\n            './seed_images/andrew-gloor-576177-unsplash.jpg',\r\n            './seed_images/arthur-poulin-96074-unsplash.jpg',\r\n        ],\r\n        location: 'MCP2+XW Biblis',\r\n        price: 8,\r\n        description: faker.lorem.paragraphs(),\r\n    },\r\n    {\r\n        name: 'Mountain Goat\\'s Rest',\r\n        images: [\r\n            './seed_images/le-tan-640851-unsplash.jpg',\r\n            './seed_images/chang-duong-372813-unsplash.jpg',\r\n            './seed_images/chris-holder-658988-unsplash.jpg',\r\n        ],\r\n        location: 'CQ2H+GM Neckargemünd',\r\n        price: 27,\r\n        description: faker.lorem.paragraphs(),\r\n    },\r\n    {\r\n        name: 'Granite Hill',\r\n        images: [\r\n            './seed_images/leon-contreras-447372-unsplash.jpg',\r\n            './seed_images/WaffleFarmCampground_EarlyMorning-Slide.jpg',\r\n            './seed_images/daan-weijers-668960-unsplash.jpg',\r\n        ],\r\n        location: 'FF3R+32 Ca',\r\n        price: 42,\r\n        description: faker.lorem.paragraphs(),\r\n    },\r\n    {\r\n        name: 'Campsite Grindavik - Tjaldsvaedi',\r\n        images: [\r\n            './seed_images/daniel-nainggolan-409972-unsplash.jpg',\r\n            './seed_images/danka-peter-178-unsplash.jpg',\r\n            './seed_images/edward-virvel-658274-unsplash.jpg',\r\n        ],\r\n        location: 'Austurvegur 26, 240 Grindavik, Iceland',\r\n        price: 12,\r\n        description: faker.lorem.paragraphs(),\r\n    },\r\n    {\r\n        name: 'Sutton Falls',\r\n        images: [\r\n            './seed_images/esther-tuttle-566634-unsplash.jpg',\r\n            './seed_images/jonathan-forage-367660-unsplash.jpg',\r\n            './seed_images/glen-jackson-242973-unsplash.jpg',\r\n        ],\r\n        location: '90 Manchaug Rd, Sutton, MA 01590, USA',\r\n        price: 8.99,\r\n        description: faker.lorem.paragraphs(),\r\n    },\r\n];\r\n\r\nasync function seedCampgrounds(seedControl) {\r\n    if (seedControl === true) {\r\n        try {\r\n            await Comment.remove({});\r\n            console.log('comments removed');\r\n            await Campground.remove({});\r\n            console.log('campgrounds removed');\r\n            const seedUser = await User.findOne({ email: process.env.SEEDER_EMAIL });\r\n            const commentUser = await User.findOne({ email: process.env.COMMENTER_EMAIL });\r\n            if (seedUser != null && commentUser != null) {\r\n                return seedDB(seedUser, commentUser);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return Promise.resolve();\r\n}\r\n// destructure the array of results passed in, ignoring the first two values\r\nasync function seedDB(seedUser, commentUser) {\r\n    const campCreatedBy = {\r\n        id: seedUser._id,\r\n        firstName: seedUser.firstName,\r\n        lastName: seedUser.lastName,\r\n    };\r\n\r\n    for (const seed of seeds) {\r\n        seed.createdBy = campCreatedBy;\r\n\r\n        try {\r\n            // upload the images to cloudinary and then save the returned urls to the seed\r\n            const cloudinaryUrls = await uploadImagesToCloudinary(seed.images);\r\n            seed.images = [];\r\n            cloudinaryUrls.forEach((cloudinaryUrl) => {\r\n                // need to clear the paths to the local files before push in the cloudinary urls.\r\n                seed.images.push(cloudinaryUrl);\r\n            });\r\n            // geocode the location provided, wait for the result, and save to the seed object\r\n            const geolocationData = await geocoder.geocode(seed.location);\r\n            seed.location = geolocationData[0].formattedAddress;\r\n            seed.location = geolocationData[0].latitude;\r\n            seed.location = geolocationData[0].longitude;\r\n            // start creating the campground and comments simultaneously, but wait for their results\r\n            const campground = await Campground.create(seed);\r\n            const comment = await Comment.create({\r\n                text: faker.lorem.sentence(),\r\n                author: {\r\n                    id: commentUser.id,\r\n                    firstName: commentUser.firstName,\r\n                    lastName: commentUser.lastName,\r\n                },\r\n            });\r\n            // finally, associatiate the comment to the campground and save back to the db.\r\n            campground.comments.push(comment);\r\n            campground.save();\r\n            console.log('campground created');\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n\r\nfunction uploadImagesToCloudinary(images) {\r\n    return Promise.all(images.map(image => new Promise((resolve, reject) => {\r\n        cloudinary.v2.uploader.upload(image, (err, result) => {\r\n            if (err) reject(err);\r\n            // sets state to \"fulfilled\",\r\n            // sets result to result.secure_url\r\n            else resolve(result.secure_url);\r\n        });\r\n    })));\r\n}\r\n\r\nmodule.exports = seedCampgrounds;\r\n","const User = require('../../models/user');\r\n\r\nfunction seedUsers() {\r\n    const adminUser = {\r\n        email: process.env.ADMIN_EMAIL,\r\n        firstName: '',\r\n        lastName: '',\r\n        isAdmin: true,\r\n    };\r\n    const dataSeeder = {\r\n        email: process.env.SEEDER_EMAIL,\r\n        firstName: 'Thomas',\r\n        lastName: 'Clayson',\r\n        isAdmin: false,\r\n    };\r\n    const commenter = {\r\n        email: process.env.COMMENTER_EMAIL,\r\n        firstName: 'Hermione',\r\n        lastName: 'Granger',\r\n        isAdmin: false,\r\n    };\r\n\r\n    try {\r\n        findOrCreateUser(adminUser, process.env.ADMIN_PASSWORD);\r\n        findOrCreateUser(dataSeeder, process.env.SEEDER_PASSWORD);\r\n        findOrCreateUser(commenter, process.env.COMMENTER_PASSWORD);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nasync function findOrCreateUser(userToFindOrCreate, password) {\r\n    try {\r\n        const foundUser = await User.findOne({ email: userToFindOrCreate.email });\r\n        if (foundUser === null) {\r\n            User.register(new User(userToFindOrCreate), password, (err, user) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                }\r\n                console.log(user);\r\n            });\r\n        }\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nmodule.exports = seedUsers;\r\n","module.exports = require(\"async\");","module.exports = require(\"body-parser\");","module.exports = require(\"cloudinary\");","module.exports = require(\"connect-flash\");","module.exports = require(\"crypto\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-breadcrumbs\");","module.exports = require(\"express-session\");","module.exports = require(\"faker\");","module.exports = require(\"memorystore\");","module.exports = require(\"method-override\");","module.exports = require(\"mongoose\");","module.exports = require(\"multer\");","module.exports = require(\"node-geocoder\");","module.exports = require(\"nodemailer\");","module.exports = require(\"passport\");","module.exports = require(\"passport-local-mongoose\");"],"sourceRoot":""}